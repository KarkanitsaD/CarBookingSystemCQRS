// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations
{
    [DbContext(typeof(CarBookingSystemContext))]
    [Migration("20220309141749_ImageWithBase64Content")]
    partial class ImageWithBase64Content
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DAL.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("HandOverTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BookingPoints");
                });

            modelBuilder.Entity("DAL.Entities.CarCarImageEntity", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarImageId")
                        .HasColumnType("uuid");

                    b.HasKey("CarId", "CarImageId");

                    b.HasIndex("CarImageId");

                    b.ToTable("CarCarImages");
                });

            modelBuilder.Entity("DAL.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingPointId")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CarTransmissionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FuelConsumption")
                        .HasColumnType("numeric");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BookingPointId");

                    b.HasIndex("CarTransmissionId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DAL.Entities.CarImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("DAL.Entities.CarLockEntity", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CarId", "UserId");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CarLocks");
                });

            modelBuilder.Entity("DAL.Entities.CarTransmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarTransmissionTypes");
                });

            modelBuilder.Entity("DAL.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeOffsetInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DAL.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.Entities.ExtraServiceBookingEntity", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExtraServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("BookingId", "ExtraServiceId");

                    b.HasIndex("ExtraServiceId");

                    b.ToTable("ExtraServiceBookings");
                });

            modelBuilder.Entity("DAL.Entities.ExtraServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingPointId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MaximumAmountInBooking")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingPointId");

                    b.ToTable("ExtraServices");
                });

            modelBuilder.Entity("DAL.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.Entities.RoleUserEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.UserImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("DAL.Entities.BookingEntity", b =>
                {
                    b.HasOne("DAL.Entities.CarEntity", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.UserEntity", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.BookingPointEntity", b =>
                {
                    b.HasOne("DAL.Entities.CityEntity", "City")
                        .WithMany("BookingPoints")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Entities.CarCarImageEntity", b =>
                {
                    b.HasOne("DAL.Entities.CarEntity", "Car")
                        .WithMany("CarCarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.CarImageEntity", "CarImage")
                        .WithMany("CarImageCars")
                        .HasForeignKey("CarImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarImage");
                });

            modelBuilder.Entity("DAL.Entities.CarEntity", b =>
                {
                    b.HasOne("DAL.Entities.BookingPointEntity", "BookingPoint")
                        .WithMany("Cars")
                        .HasForeignKey("BookingPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.CarTransmissionEntity", "Transmission")
                        .WithMany("Cars")
                        .HasForeignKey("CarTransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BookingPoint");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("DAL.Entities.CarLockEntity", b =>
                {
                    b.HasOne("DAL.Entities.CarEntity", "Car")
                        .WithOne("CarLock")
                        .HasForeignKey("DAL.Entities.CarLockEntity", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.UserEntity", "User")
                        .WithOne("CarLock")
                        .HasForeignKey("DAL.Entities.CarLockEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.CityEntity", b =>
                {
                    b.HasOne("DAL.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Entities.ExtraServiceBookingEntity", b =>
                {
                    b.HasOne("DAL.Entities.BookingEntity", "Booking")
                        .WithMany("BookingExtraServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ExtraServiceEntity", "ExtraService")
                        .WithMany("ExtraServiceBookings")
                        .HasForeignKey("ExtraServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("ExtraService");
                });

            modelBuilder.Entity("DAL.Entities.ExtraServiceEntity", b =>
                {
                    b.HasOne("DAL.Entities.BookingPointEntity", "BookingPoint")
                        .WithMany("ExtraServices")
                        .HasForeignKey("BookingPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingPoint");
                });

            modelBuilder.Entity("DAL.Entities.RoleUserEntity", b =>
                {
                    b.HasOne("DAL.Entities.RoleEntity", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserImageEntity", b =>
                {
                    b.HasOne("DAL.Entities.UserEntity", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("DAL.Entities.UserImageEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.BookingEntity", b =>
                {
                    b.Navigation("BookingExtraServices");
                });

            modelBuilder.Entity("DAL.Entities.BookingPointEntity", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("ExtraServices");
                });

            modelBuilder.Entity("DAL.Entities.CarEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CarCarImages");

                    b.Navigation("CarLock");
                });

            modelBuilder.Entity("DAL.Entities.CarImageEntity", b =>
                {
                    b.Navigation("CarImageCars");
                });

            modelBuilder.Entity("DAL.Entities.CarTransmissionEntity", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("DAL.Entities.CityEntity", b =>
                {
                    b.Navigation("BookingPoints");
                });

            modelBuilder.Entity("DAL.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DAL.Entities.ExtraServiceEntity", b =>
                {
                    b.Navigation("ExtraServiceBookings");
                });

            modelBuilder.Entity("DAL.Entities.RoleEntity", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CarLock");

                    b.Navigation("UserImage");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
